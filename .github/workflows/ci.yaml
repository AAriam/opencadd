#!/bin/bash
name: CI

on:

  push:
    branches:
      - "main"
      - "dev"

  pull_request:
    branches:
      - "main"
      - "dev"

  schedule:
    # Weekly tests run on main by default:
    #  Scheduled workflows run on the latest commit on the default or base branch.
    #  see: https://help.github.com/en/actions/reference/events-that-trigger-workflows#scheduled-events-schedule
    - cron: "0 3 * * 1"  # Run a weekly cron job at 03:00 on Mondays

jobs:

  test:

    name: Test on ${{ matrix.os }}, Python ${{ matrix.python-version }}

    runs-on: ${{ matrix.os }}

    strategy:
      fail-fast: false
      matrix:
        os: [macOS-latest, ubuntu-latest, windows-latest]
        python-version: ["3.9", "3.10", "3.11"]

    env:
      CI_OS: ${{ matrix.os }}
      PYVER: ${{ matrix.python-version }}
      PACKAGE: "opencadd"

    steps:
      - uses: actions/checkout@v3

      - name: Additional info about the build
        shell: bash
        run: |
          uname -a
          df -h
          ulimit -a

      # More info on options: https://github.com/marketplace/actions/provision-with-micromamba
      - uses: mamba-org/provision-with-micromamba@main
        with:
          environment-file: devtools/conda-envs/test_env.yaml
          environment-name: test
          channels: conda-forge,defaults,bioconda
          extra-specs: |
            python=${{ matrix.python-version }}
      

      # TODO: Remove this step when patched theseus makes it to CF
      - name: Build patched mmligner
        shell: bash -l {0}
        run: |
          conda activate base
          conda install conda-build
          conda build devtools/conda-recipes/mmligner/

      - name: Install package
        shell: bash -l {0}  # conda setup requires this special shell
        run: |
          conda install -c local mmligner pip
          python -m pip install . --no-deps
          micromamba list

      - name: Run tests
        shell: bash -l {0}  # conda setup requires this special shell
        run: |
          pytest -v --cov=${PACKAGE} --cov-report=xml --color=yes tests/

      - name: CodeCov
        uses: codecov/codecov-action@v1
        with:
          name: codecov-${{ matrix.os }}-py${{ matrix.python-version }}
          file: ./coverage.xml
          flags: unittests
          yml: ./.codecov.yml
          token: ${{ secrets.CODECOV_TOKEN }}